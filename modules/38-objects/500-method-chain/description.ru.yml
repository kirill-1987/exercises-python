тест 44 дает верный ответ при параметре: 
print(len(text[5:15].strip()))
text = 'When \t\n you play a \t\n game of thrones you win or you die.'

верный ответ:
# BEGIN (write your solution here)
print(len(text[4:15].strip()))
# END
---

name: Цепочка вызовов
theory: |

  В этом уроке мы рассмотрим, как комбинировать различные подходы, когда пишем код, а также разберем типичные ошибки новичков.

  У нас есть следующий код:

  ```python
  name = 'Tirion'
  print(name.upper().lower())  # => `tirion`
  ```

  Он напечатал на экране `tirion`.

  Синтаксис нескольких подряд идущих точек мы видим впервые, но все операции, которые здесь встречаются, нам знакомы. В этом коде объединились известные возможности языка.

  Такое в программировании происходит часто. Если вы не знаете синтаксис, то можно все равно пробовать комбинировать различные подходы, и есть вероятность, что они заработают.

  Чтобы понять, как работает этот код, нужно разбить цепочку на отдельные операции:

  ```python
  name = 'Tirion'
  upper_name = name.upper()  # 'TIRION'
  print(upper_name.lower())  # 'tirion'
  ```

  Первый и второй примеры эквивалентны. Мы можем выполнять операции последовательно с промежуточным созданием переменных, а можем строить непрерывную цепочку из атрибутов и методов. В цепочках вычисления всегда идут слева направо.

  Еще один пример для закрепления:

  ```python
  name = 'Tirion'
  print(name.replace('Ti', 'Ki').lower())  # => ?
  ```

  Над этим кодом нужно хорошо подумать. `.lower()` применяется к результату вызова метода, который находится левее. А метод `replace()` возвращает строку. Новички часто делают ошибки в цепочках с методами и забывают ставить вызов:

  ```python
  name = 'Tirion'
  # Этот код отработает неверно!
  print(name.upper.lower())
  ```

  Также возможно строить бесконечно длинные и бесполезные цепочки, которые включают в себя срезы:

  ```python
  # Чему равен результат такого вызова?
  print(name[1:5].upper().find('I'))
  ```

  С функциями это не сработает, так как обычно они вкладываются друг в друга — `f(f(f()))`. Это значительно ухудшает анализ. Но это не значит, что нельзя сделать красиво. В других языках это реализуется через композицию функций или пайплайн-оператор.

instructions: |

  С помощью среза строк получите часть предложения, записанного в переменную `text`, c `5` по `15` символы включительно. Полученную подстроку обработайте методом `.strip()` и выведите на экран длину итоговой подстроки. Выполните эти операции подряд в цепочке без создания промежуточных переменных.

definitions:
  - name: Метод
    description: |
      это функция или процедура, принадлежащая какому-то классу или объекту.
